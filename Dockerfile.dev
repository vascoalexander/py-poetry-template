# Dockerfile.dev
ARG PYTHON_VERSION=3.12
FROM debian:bookworm-slim

# Build-Args für User-Mapping
ARG USERNAME=appuser
ARG USER_UID=1000
ARG USER_GID=1000

# Systempakete
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl git zsh unzip ca-certificates build-essential sudo python3 python3-pip \
    && rm -rf /var/lib/apt/lists/*

# App-User mit UID/GID des Hosts
RUN groupadd --gid ${USER_GID} ${USERNAME} \
    && useradd --uid ${USER_UID} --gid ${USER_GID} -m -s /bin/bash ${USERNAME} \
    && usermod -aG sudo ${USERNAME}

# Setze Arbeitsverzeichnis (wird vom Host gemountet)
WORKDIR /workspace

# Git: /workspace als sicher markieren
RUN git config --global --add safe.directory /workspace

# Wechsel zu appuser
USER ${USERNAME}

# mise-Umgebungsvariablen
ENV PATH="/home/${USERNAME}/.local/bin:/home/${USERNAME}/.local/share/mise/shims:$PATH"
ENV MISE_HOME="/home/${USERNAME}/.local/share/mise"

# Vorbereitende Dateien (werden später überschrieben durch Volume)
COPY --chown=${USER_UID}:${USER_GID} pyproject.toml poetry.lock .tool-versions ./

# mise installieren
RUN curl -sSf https://mise.run | sh \
    && echo 'eval "$(mise activate bash)"' >> /home/${USERNAME}/.bashrc

# Python & Poetry über mise installieren
RUN mise install

# Poetry-Konfiguration (kein in-project venv)
RUN mise exec -- poetry config virtualenvs.in-project false

# Abhängigkeiten installieren (Entwicklungsmodus)
RUN mise exec -- poetry install --no-root --sync --with dev \
    && mkdir -p /home/${USERNAME}/.cache/pypoetry/virtualenvs \
    && chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.cache/pypoetry \
    && chown -R ${USERNAME}:${USERNAME} ${MISE_HOME}

CMD [ "bash" ]
