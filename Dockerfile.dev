# Dockerfile.dev

ARG PYTHON_VERSION=3.12

FROM python:${PYTHON_VERSION}-slim-bookworm

# Systemaktualisierung und Git-Installation
RUN apt-get update \
    && apt-get install -y --no-install-recommends git curl gosu \
    && rm -rf /var/lib/apt/lists/*

# Konfiguriere Git, um das /app-Verzeichnis als sicher zu betrachten.
RUN git config --global --add safe.directory /app

# Erstelle den Nicht-Root-Benutzer 'appuser'
RUN adduser --system --group --uid 1000 --shell /bin/bash --home /home/appuser appuser

# Setze Umgebungsvariablen für Poetry. POETRY_HOME wird hier verwendet,
# um den Installationspfad festzulegen.
ENV POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=false \
    POETRY_NO_INTERACTION=1

# Definiere den PATH für den Container, um die Poetry-Binaries zu finden
ENV PATH="${POETRY_HOME}/bin:${PATH}"

# Installiere Poetry als root in das definierte POETRY_HOME
RUN curl -sSL https://install.python-poetry.org | python3 - --version 1.8.3

# Ändere den Besitzer des Poetry-Installationsverzeichnisses zu appuser.
RUN chown -R appuser:appuser "${POETRY_HOME}"

# Setze das Arbeitsverzeichnis für das Projekt
WORKDIR /app

# Stelle sicher, dass der appuser Schreibrechte im Arbeitsverzeichnis hat.
RUN chown -R appuser:appuser /app

# Wechsle zum Nicht-Root-Benutzer für nachfolgende Befehle und zur Laufzeit
USER appuser

# WICHTIG: Setze die HOME-Umgebungsvariable für den appuser.
# Dies stellt sicher, dass Poetry und andere Tools die korrekte und beschreibbare Home-Direktory finden.
ENV HOME="/home/appuser"

# Kopiere die Poetry-Konfigurationsdateien, um den Docker-Layer-Cache zu optimieren
COPY pyproject.toml poetry.lock ./

# Installiere die Projekt-Abhängigkeiten (Produktion und Entwicklung)
RUN poetry install --no-root --sync --with dev

CMD ["bash"]