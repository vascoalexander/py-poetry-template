# Dockerfile.dev

ARG PYTHON_VERSION=3.12
FROM debian:bookworm-slim

# Build-Args für User-Mapping
ARG USERNAME=appuser
ARG USER_UID=1000
ARG USER_GID=1000

# Systempakete
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl git zsh unzip ca-certificates build-essential sudo python3 python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Git: /app als sicher markieren
RUN git config --global --add safe.directory /app

# App-User mit UID/GID des Hosts
RUN groupadd --gid ${USER_GID} ${USERNAME} \
    && useradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME} \
    && usermod -aG sudo ${USERNAME}

USER ${USERNAME}

# Mise Installation für den appuser
ENV MISE_HOME="/home/${USERNAME}/.local/share/mise"
ENV PATH="${MISE_HOME}/bin:${MISE_HOME}/shims:$PATH"

RUN curl -sSf https://mise.run | sh

RUN echo 'eval "$(mise activate bash)"' >> /home/${USERNAME}/.bashrc

WORKDIR /app
COPY --chown=${USER_UID}:${USER_GID} pyproject.toml poetry.lock .tool-versions ./

# Installiere Python-Dependencies über mise und Poetry
RUN mise install
RUN mise run poetry install --no-root --sync --with dev \
    # Berechtigungen für das Poetry Cache-Verzeichnis anpassen, falls nötig
    && mkdir -p /home/${USERNAME}/.cache/pypoetry/virtualenvs \
    && chown -R ${USERNAME}:${USERNAME} /home/${USERNAME}/.cache/pypoetry \
    && chown -R ${USERNAME}:${USERNAME} ${MISE_HOME}

# Jetzt den restlichen Projektcode kopieren
COPY --chown=${USER_UID}:${USER_GID} . .

CMD ["bash"]
